// EE 465, USC// Simulation of an M/M/1 system#include <iostream>#include <fstream>#include <stdlib.h>#include <math.h>using namespace std;#define INFIN  			999999999// Function Name:	expon// Description: 	Generates an exponentially distributed random number //					with parameter \lambda. // Input: 			lambda (double)// Output: 			An exponentially distributed random number (double)//double expon(double lambda){	double u; // used to store a random number. 		do	{		u = drand48(); //uniform number in the interval [0.0, 1.0]	}	while ((u == 0) || (u == 1)); //special cases that we want to avoid		return -log(1-u)/lambda;	}// Function Name:	print_stats// Description: 	Saves and prints system statistics // Input:           stats_file (ostream object): ostream object for the stats file//					avg_customers (double): average customers in the system//					avg_service_time (double): average service time // Output: 			void (output stored to file and printed in the screen)//void print_stats(ostream &stats_file, double avg_customers, double avg_service_time){	cout << "Average No. of Customers: " << avg_customers << endl;	cout << "Average Service Time: " << avg_service_time << endl;		stats_file << "Average No. of Customers: " << avg_customers << endl;	stats_file << "Average Service Time: " << avg_service_time << endl;}// The main function of the program that is called at the beginning.int main() {	//system variables	long int tot_arrivals, cur_arrivals = 0;	double lambda, mu;	double event1 = 0.0, event2 = INFIN; //event1: time of next arrival, event2: time of next departure	double service_time, cur_time = 0.0, customers = 0.0;	double avg_customers = 0.0, avg_service_time = 0.0; //used for calculating statistics	ofstream stats_file; //file handler for saving the statistics in a file		//get input from the user	cout << "Basic M/M/1 Simulator" << endl;	cout << "Enter the total number of arrivals: ";	cin >> tot_arrivals;	cout << "Enter lambda: ";	cin >> lambda;	cout << "Enter mu: ";	cin >> mu;				stats_file.open ("stats.txt"); //it creates the file, if it does not exist		// discrete event simulator 	while (cur_arrivals < tot_arrivals)	{		if (event1 < event2)	//arrival		{			cur_arrivals++;			avg_customers+=customers;			customers ++;			cur_time = event1;			event1 = cur_time + expon(lambda);			if (customers == 1)	//if there is only 1 customer, he/she goes directly to service			{				service_time = expon(mu);				event2 = cur_time + service_time;				avg_service_time += service_time;			}		}		else					//departure		{			customers--;			cur_time = event2;			if (customers > 0) // the departure left a non-empty queue behind			{				service_time = expon(mu);				event2 = cur_time + service_time;				avg_service_time += service_time;			}			else 				//the departure left the queue empty			{				event2 = INFIN; //no departure scheduled			}		}	}		avg_customers /=cur_arrivals; 	avg_service_time /=(cur_arrivals-customers);	print_stats(stats_file, avg_customers, avg_service_time);	stats_file.close();	return 0;}